/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.checkers.game.gui;

import com.checkers.game.board.Board;
import com.checkers.game.board.piece.Color;
import javax.swing.DefaultListModel;

/**
 *
 * @author maass
 */
public class Checkers_Gui extends javax.swing.JFrame {

    Board b;
    GameFacade  gf;
    DefaultListModel redModel,blackModel;
    
    /**
     * Creates new form Checkers_Gui
     */
    public Checkers_Gui() {
        gf = new GameFacade(PlayerType.Human, PlayerType.Human, false);
        b = gf.b;
        initComponents();
        updateLabels();
        initializeMoves();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        newGame = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        redGroup = new javax.swing.ButtonGroup();
        blackGroup = new javax.swing.ButtonGroup();
        turnGroup = new javax.swing.ButtonGroup();
        endGame = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        winnerLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        gameBoard = new CheckersBoard(b);
        jPanel1 = new javax.swing.JPanel();
        blackMenLabel = new javax.swing.JLabel();
        redMenLabel = new javax.swing.JLabel();
        blackKingLabel = new javax.swing.JLabel();
        redKingLabel = new javax.swing.JLabel();
        blackPieceRatioLabel = new javax.swing.JLabel();
        redPieceRatioLabel = new javax.swing.JLabel();
        turnLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        blackList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        redList = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        blackExecute = new javax.swing.JButton();
        redExecute = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        undueAction = new javax.swing.JMenuItem();

        newGame.setResizable(false);
        newGame.setSize(new java.awt.Dimension(370, 190));

        jLabel10.setText("Black");

        jLabel11.setText("Red");

        blackGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Player");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, blackGroup, org.jdesktop.beansbinding.ELProperty.create("${0}"), jRadioButton1, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        blackGroup.add(jRadioButton2);
        jRadioButton2.setText("Random");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, blackGroup, org.jdesktop.beansbinding.ELProperty.create("${1}"), jRadioButton2, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        blackGroup.add(jRadioButton3);
        jRadioButton3.setText("AI");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, blackGroup, org.jdesktop.beansbinding.ELProperty.create("${2}"), jRadioButton3, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        redGroup.add(jRadioButton4);
        jRadioButton4.setSelected(true);
        jRadioButton4.setText("Player");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, redGroup, org.jdesktop.beansbinding.ELProperty.create("${0}"), jRadioButton4, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        redGroup.add(jRadioButton5);
        jRadioButton5.setText("Random");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, redGroup, org.jdesktop.beansbinding.ELProperty.create("${1}"), jRadioButton5, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        redGroup.add(jRadioButton6);
        jRadioButton6.setText("AI");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, redGroup, org.jdesktop.beansbinding.ELProperty.create("${2}"), jRadioButton6, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        jLabel12.setText("Turn");

        turnGroup.add(jRadioButton7);
        jRadioButton7.setSelected(true);
        jRadioButton7.setText("Black First");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, turnGroup, org.jdesktop.beansbinding.ELProperty.create("${0}"), jRadioButton7, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        turnGroup.add(jRadioButton8);
        jRadioButton8.setText("Red First");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, turnGroup, org.jdesktop.beansbinding.ELProperty.create("${1}"), jRadioButton8, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        jButton3.setText("Start");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newGameLayout = new javax.swing.GroupLayout(newGame.getContentPane());
        newGame.getContentPane().setLayout(newGameLayout);
        newGameLayout.setHorizontalGroup(
            newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addGap(18, 18, 18)
                .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton6)
                    .addGroup(newGameLayout.createSequentialGroup()
                        .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jRadioButton4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton5, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(24, 24, 24)
                        .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton8)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton7))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        newGameLayout.setVerticalGroup(
            newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton6))
                .addGap(30, 30, 30)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        endGame.setMinimumSize(new java.awt.Dimension(200, 125));
        endGame.setModal(true);
        endGame.setSize(new java.awt.Dimension(200, 125));
        endGame.getContentPane().setLayout(new java.awt.GridLayout(2, 1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Game Over!");
        endGame.getContentPane().add(jLabel1);

        winnerLabel.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        winnerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        winnerLabel.setText("jLabel2");
        endGame.getContentPane().add(winnerLabel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(750, 750));
        setPreferredSize(new java.awt.Dimension(750, 750));
        setSize(new java.awt.Dimension(750, 750));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(750, 750));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMaximumSize(new java.awt.Dimension(750, 750));
        jPanel2.setPreferredSize(new java.awt.Dimension(750, 750));
        jPanel2.setRequestFocusEnabled(false);

        gameBoard.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gameBoard.setMaximumSize(new java.awt.Dimension(647, 647));
        gameBoard.setMinimumSize(new java.awt.Dimension(647, 647));
        gameBoard.setPreferredSize(new java.awt.Dimension(647, 647));
        gameBoard.setLayout(new java.awt.GridLayout(8, 8, 1, 1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridLayout(4, 2));

        blackMenLabel.setText("BlackMen: ");
        jPanel1.add(blackMenLabel);

        redMenLabel.setText("RedMen:");
        redMenLabel.setMaximumSize(new java.awt.Dimension(40, 20));
        redMenLabel.setPreferredSize(new java.awt.Dimension(40, 20));
        jPanel1.add(redMenLabel);

        blackKingLabel.setText("BlackKings:");
        jPanel1.add(blackKingLabel);

        redKingLabel.setText("RedKings");
        jPanel1.add(redKingLabel);

        blackPieceRatioLabel.setText("Black Piece Ratio:");
        jPanel1.add(blackPieceRatioLabel);

        redPieceRatioLabel.setText("Red Piece Ratio:");
        jPanel1.add(redPieceRatioLabel);

        turnLabel.setText("Turn: ");
        jPanel1.add(turnLabel);

        blackList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        blackList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        blackList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                blackListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(blackList);

        redList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        redList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        redList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(redList);

        jLabel8.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel8.setText("Black Actions");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel9.setText("Red Actions");

        blackExecute.setText("Execute");
        blackExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackExecuteActionPerformed(evt);
            }
        });

        redExecute.setText("Execute");
        redExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redExecuteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(gameBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(blackExecute))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(redExecute)))
                        .addGap(0, 186, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blackExecute))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(redExecute))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(gameBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 99, Short.MAX_VALUE))
        );

        gameBoard.getAccessibleContext().setAccessibleParent(this);

        jScrollPane1.setViewportView(jPanel2);

        jMenuBar1.setMaximumSize(new java.awt.Dimension(70, 750));

        jMenu1.setText("File");

        jMenuItem1.setText("New Game");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        undueAction.setText("Undue");
        undueAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undueActionActionPerformed(evt);
            }
        });
        jMenu2.add(undueAction);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1154, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGame(){
        gf = new GameFacade(PlayerType.Human, PlayerType.Human, false);
        b = gf.b;
        
    }
    
    /**
     * This method initializes the move and jumps list when the gui is first 
     * loaded.
     */
    private void initializeMoves(){
        redModel = new DefaultListModel();
        blackModel = new DefaultListModel();
        redList.setModel(redModel);
        blackList.setModel(blackModel);
        
        if(b.isIsRedTurn()){
            gf.getRedActionStrings().stream().forEach((s) -> {
                redModel.addElement(s);
            });
            redList.setModel(redModel);
            blackList.setModel(blackModel);
        }
        else{
           gf.getBlackActionStrings().stream().forEach((s) -> {
                blackModel.addElement(s);
            });
            redList.setModel(redModel);
            blackList.setModel(blackModel);
        
        }
    }
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        newGame.setDefaultCloseOperation(HIDE_ON_CLOSE);
        newGame.setTitle("Game Setup");
        newGame.setModal(true);
        newGame.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void blackExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackExecuteActionPerformed
        if(b.endOfGame()){
            if(!b.isIsRedTurn() && !blackList.isSelectionEmpty()){
                gf.executeAction((String)blackList.getSelectedValue(), Color.BLACK);
                ((CheckersBoard)gameBoard).updateBoard(gf.b);
                if(b.endOfGame()){
                    updateLabels();
                    ((CheckersBoard)gameBoard).updateBoard(gf.b);
                    
                    blackModel.removeAllElements();
                    blackList.setModel(blackModel);
                    gf.getRedActionStrings().stream().forEach(str -> 
                            redModel.addElement(str)
                    );
                    redList.setModel(redModel);
                }
                else{
                    showEndGameDialog();
                }
            
            }
        }
        else{
            showEndGameDialog();
        }
    }//GEN-LAST:event_blackExecuteActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        PlayerType redType = PlayerType.Human; 
        PlayerType blackType = PlayerType.Human; 
        boolean isRedTurn = false;
        switch(blackGroup.getSelection().getActionCommand()){
            case "0":
                blackType = PlayerType.Human;
                break;
            case "1":
                blackType = PlayerType.Random;
                break;
            case "2":
                blackType = PlayerType.AI;
                break;
            
        }
        switch(redGroup.getSelection().getActionCommand()){
            case "0":
                redType = PlayerType.Human;
                break;
            case "1":
                redType = PlayerType.Random;
                break;
            case "2":
                redType = PlayerType.AI;
                break;
        }
        switch(turnGroup.getSelection().getActionCommand()){
            case "0":
                isRedTurn = false;
                break;
            case "1":
                isRedTurn = true;
                break;
        }
        gf = new GameFacade(redType, blackType, isRedTurn);
        b=gf.b;
        ((CheckersBoard)gameBoard).resetBoard(b);
        updateLabels();
        initializeMoves();
        newGame.setVisible(false);
        repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void redExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redExecuteActionPerformed
        if(b.endOfGame()){
            if(b.isIsRedTurn() && !redList.isSelectionEmpty()){
                gf.executeAction((String)redList.getSelectedValue(), Color.RED);
                ((CheckersBoard)gameBoard).updateBoard(gf.b);
                if(b.endOfGame()){
                    updateLabels();
                    ((CheckersBoard)gameBoard).updateBoard(gf.b);
                    repaint();
                    redModel.removeAllElements();
                    redList.setModel(redModel);
                    gf.getBlackActionStrings().stream().forEach(str -> 
                            blackModel.addElement(str)
                    );
                    blackList.setModel(blackModel);
                }
                else{
                    showEndGameDialog();
                }
            
            }
        }
        else{
            showEndGameDialog();
        }
    }//GEN-LAST:event_redExecuteActionPerformed

    private void blackListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blackListMouseClicked
        if(b.endOfGame()){
            if(!b.isIsRedTurn() && !blackList.isSelectionEmpty()){
                ((CheckersBoard)gameBoard).highlightAction(
                        gf.b.getBlackActionFromString(blackList.getSelectedValue()));
            
            }
        }
    }//GEN-LAST:event_blackListMouseClicked

    private void redListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redListMouseClicked
        if(b.endOfGame()){
            if(b.isIsRedTurn() && !redList.isSelectionEmpty()){
                ((CheckersBoard)gameBoard).highlightAction(
                        gf.b.getRedActionFromString(redList.getSelectedValue()));
            
            }
        }
    }//GEN-LAST:event_redListMouseClicked

    private void undueActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undueActionActionPerformed
        gf.b.undueLastAction();
        ((CheckersBoard)gameBoard).updateBoard(gf.b);
        initializeMoves();
        updateLabels();
    }//GEN-LAST:event_undueActionActionPerformed

    private void showEndGameDialog(){
        endGame.setDefaultCloseOperation(HIDE_ON_CLOSE);
        endGame.setTitle("End Game");
        winnerLabel.setText(gf.b.didBlackWin()?"Black Wins!":"Red Wins!");
        endGame.setModal(true);
        endGame.setVisible(true);
    }
    
    private void updateLabels(){
        blackMenLabel.setText("BlackMen: "+gf.b.getNumBlackMen());
        blackKingLabel.setText("BlackKings: "+gf.b.getNumBlackKing());
        redMenLabel.setText("RedMen: "+gf.b.getNumRedMen());
        redKingLabel.setText("RedKings:"+gf.b.getNumRedKing());
        blackPieceRatioLabel.setText("Black Piece Ratio: "+Math.round(10000*((0.0+gf.b.getNumBlackMen()+gf.b.getNumBlackKing())
                /(gf.b.getNumRedMen()+gf.b.getNumRedKing())))/10000.0);
        redPieceRatioLabel.setText("Red Piece Ratio: "+Math.round(10000*((0.0+gf.b.getNumRedMen()+gf.b.getNumRedKing())
                /(gf.b.getNumBlackMen()+gf.b.getNumBlackKing())))/10000.0);
        turnLabel.setText(gf.b.isIsRedTurn()?"Turn: Red's Turn":"Turn: Black's Turn");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Checkers_Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Checkers_Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Checkers_Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Checkers_Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Checkers_Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton blackExecute;
    private javax.swing.ButtonGroup blackGroup;
    private javax.swing.JLabel blackKingLabel;
    private javax.swing.JList<String> blackList;
    private javax.swing.JLabel blackMenLabel;
    private javax.swing.JLabel blackPieceRatioLabel;
    private javax.swing.JDialog endGame;
    private javax.swing.JPanel gameBoard;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JDialog newGame;
    private javax.swing.JButton redExecute;
    private javax.swing.ButtonGroup redGroup;
    private javax.swing.JLabel redKingLabel;
    private javax.swing.JList<String> redList;
    private javax.swing.JLabel redMenLabel;
    private javax.swing.JLabel redPieceRatioLabel;
    private javax.swing.ButtonGroup turnGroup;
    private javax.swing.JLabel turnLabel;
    private javax.swing.JMenuItem undueAction;
    private javax.swing.JLabel winnerLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
